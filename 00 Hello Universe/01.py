import easygui as eg
# Autogenerated with DRAKON Editor 1.31

def _item_remove():
    #item 697
    """cleanup from drakon for easy code reading!  ignore me!"""
    #item 695
    import os
    
    me = os.getcwd()+r'\Python3.py'
    file_of_me = open(me)
    content = file_of_me.readlines()
    file_of_me.close()
    
    import re
    
    new_code = []
    
    for txt in content:
        new_code.append(txt)
    
    file_of_me = open(me,'w')
    for txt in new_code:
        file_of_me.write(str(txt))


def basics_sort():
    #item 498
    print("sorting a list does not change the list, a new list is returned")
    
    a = [5, 1, 4, 3]
    print(sorted(a))  ## [1, 3, 4, 5]
    print(a)  ## [5, 1, 4, 3]
    #item 501
    print("sorting can take optional arguments and works with any iterable collection")
    
    strs = ['aa', 'BB', 'zz', 'CC']
    print(sorted(strs))  
    print(sorted(strs, reverse=True))
    #item 502
    print("For example, you can sort by length")
    strs = ['ccc', 'aaaa', 'd', 'bb', 'CC']
    print(sorted(strs, key=len))
    #item 509
    print("To pass a custom function in, create the function. and pass it in")
    print("sort_function1 returns the last value in a string")
    strs = ['xc', 'zb', 'yd' ,'wa']
    print(sorted(strs, key=sort_function1)) ## ['wa', 'zb', 'xc', 'yd']


def control_flow_main():
    #item 346
    """ demonstration of control flows in drakon """
    #item 345
    if_statement()
    #item 347
    select_flow(1)
    select_flow("one")
    select_flow(3)
    select_flow("3")
    #item 450
    print("_"*56)


def customer_class_main():
    #item 302
    cust1 = customer("Poor_David")
    cust2 = customer("Rich_David",100)
    #item 676
    print(cust1)
    #item 675
    cust2.send_funds(cust1,10)
    #item 656
    print(cust1)
    #item 689
    cust1.withdrawal(5)
    cust1.withdrawal(5)
    cust1.withdrawal(5)


def demo_multichoice(title):
    #item 596
    """ Popup a demo multichoice window """
    #item 593
    question = "This is your question"
    #item 594
    listOfOptions = ["option 1", "option 2", "option 3"]
    #item 592
    choice = eg.multchoicebox(question, title, listOfOptions)
    #item 595
    return(choice)


def dialogs_main():
    #item 614
    demo_multichoice("Siji")
    while_multichoice()
    #item 626
    print("DO WHILE DEMO")
    do_while_loop()


def dict_formatting():
    #item 570
    print("dict formatting")
    person = {}
    person['name'] = 'David'
    person['age'] = ' old enough'
    person['sex'] = 'yes'
    person['number'] = 42
    
    s_person = ("""
    This person is: %(name)s 
    	is: %(age)s
    	Sex: %(sex)s
    	number: %(number)d""" 
    % person)
    
    print(s_person)
    print(person)
    print("removing items from dictionaries is the same as lists")
    del person['number']
    print(person)


def dict_hash_table():
    #item 563
    print("dicts are hash table structures key:value")
    dict = {}
    dict['a'] = 'alpha'
    dict['g'] = 'gamma'
    dict['o'] = 'omega'
    print(dict)
    print(dict['a'])
    print("""print(dict['z']) ERROR""")
    if 'z' in dict: print(dict['z']  )
    print( dict.get('a'))
    print( dict.get('z'))
    
    for k in dict.items():
    	print(k)
    
    for key, value in dict.items():
    	print(key +': ' +value)
    for key in dict:
        #item 566
        print(key)


def dict_main():
    #item 572
    print("_"*56)
    #item 562
    dict_hash_table()
    #item 573
    print("_"*56)
    #item 571
    dict_formatting()
    #item 657
    print("_"*56)


def do_while_loop():
    #item 625
    """This is the demonstration of a do-while loop."""
    while True:
        #item 619
        
        ans = demo_multichoice("do while  loop demo")
        print(ans)
        #item 620
        if ans:
            pass
        else:
            break
        #item 622
        print("""This code path is being executed; it will loop again """)
    #item 621
    print("This code path is being executed, it will not loop again")


def foreach_loop(items_list):
    #item 284
    """This is the demonstration of a foreach loop;
     it will also serve to for expansion to print a list"""
    for my_item in items_list:
        #item 289
        print(my_item)


def if_statement():
    #item 393
    speed = 100
    #item 390
    if speed > 80:
        #item 395
        print("Have a nice day")
    else:
        #item 394
        print("Going to jail")


def introduction_main():
    #item 701
    """ This is the introduction main, edits here change what runs """
    #getting started http://drakon-editor.sourceforge.net/python/python.html#classes
    #item 702
    string_main()
    #item 703
    control_flow_main()
    #item 705
    #loops_demo()
    #item 704
    lists_main()
    #item 706
    sorting_main()
    #item 707
    tuples_main()
    #item 708
    dict_main()
    #item 709
    pattern_main()
    #item 710
    #dialogs_main()
    #item 711
    customer_class_main()


def list_comprehension2():
    #item 540
    
    strs = ['hello','universe']
    shout_strs = [pos.upper() + '!!!' for pos in strs]
    print(shout_strs)
    
    print("conditional list comprehension")
    nums = [2, 4, 188, 20, 5]
    small_enough = [ n for n in nums if n <= 100 ]
    print(small_enough)


def list_comprehensions_squares(my_passed_list):
    #item 532
    """syntax: [ expr for var in list ] -- the for var in list """
    #item 533
    squares = [ number*number for number in my_passed_list ]
    return squares


def list_methods():
    #item 465
    """ Working with common list methods """
    #item 457
    people_list = ['larry', 'curly', 'moe']
    
    #building on earlier loops work
    #print current list of people
    foreach_loop(people_list) 
    
    print("Adding a single element to the end of the list")
    people_list.append('david')
    #unlike all of the other people in this code; you are important
    #Make your name caps
    people_list.append('David')
    #item 466
    #I really meant to add Myself at the front of the list
    print("Inserting into a list at a particular location")
    people_list.insert(0,'David')
    print(people_list)
    #item 467
    #Now, I'm in the list multiple times
    print("removing elements from list")
    people_list.remove('david')
    print(people_list)
    #item 468
    #now, I'm only in the list twice
    
    people_list.pop(4)
    print(people_list)
    #item 481
    print("end of list methods; swear this is running")


def list_slices():
    #item 499
    """list slices methods demo"""
    #item 482
    print("Slices seem to work on lists & strings ")
    list = ['a', 'b', 'c', 'd']
    print(list[1:-1])   ## ['b', 'c']
    list[0:2] = 'z'    ## replace ['a', 'b'] with ['z']
    print(list)        ## ['z', 'c', 'd']


def lists_main():
    #item 463
    list_methods()
    #item 485
    print("_"*56)
    #item 472
    list_slices()
    #item 484
    print("_"*56)
    #item 531
    nums = [1,2,3,4]
    print(list_comprehensions_squares(nums))
    
    list_comprehension2()
    #item 534
    print("_"*56)


def loops_demo():
    #item 296
    """ Displays foreach, while, and do-while loops """
    #item 293
    print("FOREACH DEMO")
    fruits = ['apples', 'cherries', 'pears']
    foreach_loop(fruits)
    #item 451
    print("FOREACH DEMO 2")
    fruits = ['larry', 'curly', 'moe']
    foreach_loop(fruits)
    #item 294
    print("WHILE DEMO")
    #while_loop()
    #item 470
    print("_"*56)


def main():
    #item 717
    _item_remove()
    #item 718
    #introduction_main()
    #item 720
    #msqli_main()
    #item 820
    msqli_swcarpentry()


def msqli_main():
    #item 727
    print("entering sql")
    #item 726
    mysql_create_drop_table()
    #item 746
    mysql_create_insert()
    mysql_read_update()
    #item 771
    mysql_transactions()


def msqli_swcarpentry():
    #item 777
    mysql_swc_01_select_intro()
    mysql_swc_01_select_question()
    
    
    mysql_swc_02_sorting_duplicates()
    mysql_swc_02_sorting_duplicates_question()
    
    mysql_swc_03_filtering()
    
    mysql_swc_04_calc()
    mysql_swc_05_null()
    mysql_swc_06_aggregation()
    mysql_swc_07_join()
    mysql_swc_09_create()


def mysql_create_drop_table():
    #item 734
    import sqlite3
    # Create a database in RAM
    dbr = sqlite3.connect(':memory:')
    # Creates or opens a file called mydb with a SQLite3 DB
    dbd = sqlite3.connect('mydb')
    #item 733
    cursor = dbd.cursor()
    cursor.execute('''
        CREATE TABLE users(id INTEGER PRIMARY KEY, name TEXT,
                           phone TEXT, email TEXT unique, password TEXT)
    ''')
    dbd.commit()
    print("table created")
    #item 736
    cursor = dbd.cursor()
    cursor.execute('''DROP TABLE users''')
    dbd.commit()
    print("table dropped")
    #item 735
    dbr.close()
    dbd.close()


def mysql_create_insert():
    #item 743
    import sqlite3
    
    dbd = sqlite3.connect('mydb2')
    #item 742
    cursor = dbd.cursor()
    cursor.execute('''DROP TABLE users''')
    cursor.execute('''
        CREATE TABLE users(id INTEGER PRIMARY KEY, name TEXT,
                   phone TEXT, email TEXT unique, password TEXT)
    ''')
    dbd.commit()
    print("table created")
    #item 745
    cursor = dbd.cursor()
    name1 = 'David'
    phone1 = '7064523484'
    email1 = 'David@DavidsIT.Site'
    # A very secure password
    password1 = 'Flanagan'
     
    name2 = 'Poor_David'
    phone2 = '6783696707'
    email2 = 'david@example.com'
    password2 = 'password'
    
    
    # Insert user 1
    cursor.execute('''INSERT INTO users(name, phone, email, password)
                      VALUES(?,?,?,?)''', (name1,phone1, email1, password1))
    print('First user inserted')
     
    # Insert user 2
    cursor.execute('''INSERT INTO users(name, phone, email, password)
                      VALUES(?,?,?,?)''', (name2,phone2, email2, password2))
    print('Second user inserted')
     
    dbd.commit()
    
    dbd.close()


def mysql_read_update():
    #item 758
    import sqlite3
    dbd = sqlite3.connect('mydb2')
    cursor = dbd.cursor()
    
    
    cursor.execute('''SELECT name, email, phone, password FROM users''')
    for row in cursor:
        # row[0] returns the first column in the query (name), row[1] returns email column.
        print('{0} - {3} : {1}, {2}'.format(row[0], row[1], row[2],row[3]))
    #item 762
    print("_"*56)
    #item 763
    newphone = '6783696707'
    user_id = 1
    print("Updating user phone")
    cursor.execute('''UPDATE users SET phone = ? WHERE id = ? ''',
     (newphone, user_id))
     
    
    
    cursor.execute('''SELECT name, email, phone FROM users WHERE id=?''', (user_id,))
    user = cursor.fetchone()
    print(user)
    #item 764
    print("_"*56)
    #item 760
    
    # Delete user with id 1
    delete_userid = 1
    print("Deleting User\nStill in DB:")
    cursor.execute('''DELETE FROM users WHERE id = ? ''', (delete_userid,))
     
    
    cursor.execute('''SELECT name, email, phone, password FROM users''')
    for row in cursor:
        # row[0] returns the first column in the query (name), row[1] returns email column.
        print('{0} - {3} : {1}, {2}'.format(row[0], row[1], row[2],row[3]))
    
    
    dbd.commit()
    
    dbd.close()


def mysql_swc_01_select_intro():
    #item 821
    """https://swcarpentry.github.io/sql-novice-survey/01-select/index.html
    How can I get data from a database?
    
    """
    #item 787
    import sqlite3
    
    db = sqlite3.connect( """C:/Users/David/OneDrive - DavidIT.Site/GITHUB/Python3/00 Hello Universe/data/survey.db""")
    cursor = db.cursor()
    #item 786
    print("SELECT family, personal FROM person;")
    cursor.execute('''SELECT family, personal FROM person;''')
    for row in cursor:
        # row[0] returns the first column in the query (family), row[1] returns Person column.
        print('{0} - {1}'.format(row[0], row[1]))
    #item 822
    print("\nCaps does not matter")
    print("SeLeCt FaMiLy, PeRsOnAl FrOm PeRsOn;\n")
    
    cursor.execute('''SeLeCt FaMiLy, PeRsOnAl FrOm PeRsOn;''')
    for row in cursor:
        print('{1} - {0}'.format(row[0], row[1]))
    #item 823
    print("\nRepeat Columns")
    print("SELECT id, id, id FROM Person;\n")
    
    cursor.execute('''SELECT id, id, id FROM Person;''')
    for row in cursor:
        print('{0} - {1} - {2}'.format(row[0], row[1], row[2]))
    #item 824
    print("\n Selecting all data")
    print("SELECT * FROM Person;\n")
    
    cursor.execute('''SELECT * FROM Person;''')
    for row in cursor:
        print('{0} - {1} - {2}'.format(row[0], row[1], row[2]))
    #item 788
    db.close()


def mysql_swc_01_select_question():
    #item 833
    """Write a query that selects only the name column from the Site table.
    """
    #item 831
    import sqlite3
    
    db = sqlite3.connect( """C:/Users/David/OneDrive - DavidIT.Site/GITHUB/Python3/00 Hello Universe/data/survey.db""")
    cursor = db.cursor()
    #item 830
    print("SELECT name FROM site;")
    cursor.execute('''SELECT name FROM site;''')
    for row in cursor:
        print('{0}'.format(row[0]))
    #item 832
    db.close()


def mysql_swc_02_sorting_duplicates():
    #item 842
    """How can I sort a query’s results?
    
    How can I remove duplicate values from a query’s results?"""
    #item 840
    import sqlite3
    
    db = sqlite3.connect( """C:/Users/David/OneDrive - DavidIT.Site/GITHUB/Python3/00 Hello Universe/data/survey.db""")
    cursor = db.cursor()
    #item 839
    print("SELECT quant FROM survey;")
    cursor.execute('''SELECT quant FROM survey;''')
    for row in cursor:
        print('{0}'.format(row[0]))
    #item 855
    print("SELECT DISTINCT quant FROM survey;")
    cursor.execute('''SELECT DISTINCT quant FROM survey;''')
    for row in cursor:
        print('{0}'.format(row[0]))
    #item 856
    
    print("SELECT taken, quant FROM survey;")
    cursor.execute('''SELECT taken, quant FROM survey;''')
    for row in cursor:
        print('{0} - {1} '.format(row[0], row[1]))
    #item 857
    
    print("SELECT DISTINCT taken, quant FROM survey;")
    cursor.execute('''SELECT DISTINCT  taken, quant FROM survey;''')
    for row in cursor:
        print('{0} - {1} '.format(row[0], row[1]))
    #item 858
    
    
    
    print("SELECT * FROM Person ORDER BY id;")
    cursor.execute('''SELECT * FROM Person ORDER BY id;''')
    for row in cursor:
        print('{0} - {1} '.format(row[0], row[2]))
    #item 859
    
    
    
    print("SELECT * FROM Person ORDER BY id DESC;")
    cursor.execute('''SELECT * FROM Person ORDER BY id DESC;''')
    for row in cursor:
        print('{0} - {1} '.format(row[0], row[2]))
    #item 860
    
    
    
    print(" this query sorts results first in ascending order by taken, and then in descending order by person within each group of equal taken values")
    cursor.execute('''SELECT taken, person, quant FROM Survey ORDER BY taken ASC, person DESC;''')
    for row in cursor:
        print('{0} - {1} - {2} '.format(row[0], row[1], row[2]))
    #item 841
    db.close()


def mysql_swc_02_sorting_duplicates_question():
    #item 854
    """Write a query that selects distinct dates from the Visited table."""
    #item 852
    import sqlite3
    
    db = sqlite3.connect( """C:/Users/David/OneDrive - DavidIT.Site/GITHUB/Python3/00 Hello Universe/data/survey.db""")
    cursor = db.cursor()
    #item 861
    
    
    
    print("Write a query that prints distinct dates from the Visited table.")
    cursor.execute('''SELECT DISTINCT dated FROM Visited''')
    for row in cursor:
        print('{0} '.format(row[0]))
    #item 863
    print("Write a query that displays the full names of the scientists in the Person table, ordered by family name.")
    #item 862
    
    cursor = db.cursor()
    cursor.execute('''SELECT DISTINCT family, personal FROM Person ORDER BY family asc''')
    for row in cursor:
        print('{1} - {0} '.format(row[0],row[1]))
    db.close()


def mysql_swc_03_filtering():
    #item 880
    """select records from the Visited table by using a WHERE clause in our query"""
    #item 886
    import sqlite3
    db = sqlite3.connect( """C:/Users/David/OneDrive - DavidIT.Site/GITHUB/Python3/00 Hello Universe/data/survey.db""")
    my_cursor = db.cursor()
    #item 881
    my_cursor.execute('''SELECT * FROM Visited WHERE site ='DR-1';''')
    for row in my_cursor:
        print('{0} - {1} - {2} '.format(row[0],row[1],row[2]))
    #item 882
    my_cursor.execute('''SELECT * FROM Visited WHERE site = 'DR-1' AND dated < '1930-01-01';''')
    for row in my_cursor:
        print('{0} - {1} - {2} '.format(row[0],row[1],row[2]))
    #item 883
    
    my_cursor.execute('''SELECT * FROM Survey WHERE quant = 'sal' AND (person = 'lake' OR person = 'roe');''')
    for row in my_cursor:
        print('{0} - {1} - {2} - {3} '.format(row[0],row[1],row[2],row[3]))
    #item 884
    
    my_cursor.execute('''SELECT * FROM Site WHERE (lat > 42) OR (lat < -42);''')
    for row in my_cursor:
        print('{0} - {1} - {2} '.format(row[0],row[1],row[2]))
    #item 885
    my_cursor.execute('''SELECT * FROM Survey WHERE quant = 'sal' AND ((reading>1.0) OR (reading<0));''')
    for row in my_cursor:
        print('{0} - {1} - {2} '.format(row[0],row[1],row[2]))
    #item 887
    db.close()


def mysql_swc_04_calc():
    #item 895
    """Calculate modified values when pulling from a database"""
    #item 893
    import sqlite3
    db = sqlite3.connect( """C:/Users/David/OneDrive - DavidIT.Site/GITHUB/Python3/00 Hello Universe/data/survey.db""")
    db.row_factory = sqlite3.Row
    my_cursor = db.cursor()
    #item 896
    my_cursor.execute('''SELECT (1.05 * reading), taken, person FROM Survey WHERE quant ='rad' ;''')
    for row in my_cursor:
        print('{0} - {1} - {2} '.format(row[0],row[1],row[2]))
    #item 897
    my_cursor.execute('''SELECT round((1.05 * reading),2), taken, person FROM Survey WHERE quant ='rad' ;''')
    for row in my_cursor:
        print('{0} - {1} - {2} '.format(row[0],row[1],row[2]))
    #item 898
    my_cursor.execute('''SELECT round((1.05 * reading),2), taken, person FROM Survey WHERE quant ='rad' ;''')
    for row in my_cursor:
        print('{0} - {1} - {2} '.format(row[0],row[1],row[2]))
    #item 899
    my_cursor.execute('''SELECT taken, round((1.05 * reading),2) AS new_reading, person || ' ' || quant AS personal_quant FROM Survey WHERE quant ='rad' ;''')
    for row in my_cursor:
        print('{0} - {1} - {2} '.format(row['new_reading'],row['taken'],row['personal_quant']))
    #item 900
    
    my_cursor.execute('''SELECT taken, round(reading / 100,3) AS new_reading FROM Survey WHERE person = 'roe' AND quant = 'sal';''')
    for row in my_cursor:
        print('{0} - {1}'.format(row['taken'],row['new_reading']))
    #item 901
    
    my_cursor.execute('''SELECT taken, round(reading / 100,3) AS new_reading FROM Survey WHERE person = 'roe' AND quant = 'sal';''')
    for row in my_cursor:
        print('{0} - {1}'.format(row['taken'],row['new_reading']))
    #item 904
    
    my_cursor.execute('''SELECT * FROM Person WHERE id = 'dyer' UNION SELECT * FROM Person WHERE id = 'roe'; ''')
    for row in my_cursor:
        print('{0} - {1}'.format(row[0],row[1]))
    #item 905
    
    my_cursor.execute('''SELECT * FROM Survey WHERE person = 'dyer' UNION SELECT * FROM Survey WHERE person = 'roe'; ''')
    for row in my_cursor:
        print('{0} - {1}'.format(row[0],row[1]))
    #item 906
    
    my_cursor.execute('''SELECT DISTINCT site from Visited''')
    for row in my_cursor:
        print('{0}'.format(row[0]))
    #item 907
    
    my_cursor.execute('''SELECT DISTINCT substr(site, 1, instr(site, '-') -1) AS MajorSite FROM Visited;''')
    for row in my_cursor:
        print('{0}'.format(row[0]))
    #item 894
    db.close()


def mysql_swc_05_null():
    #item 915
    """Calculate modified values when pulling from a database"""
    #item 913
    import sqlite3
    db = sqlite3.connect( """C:/Users/David/OneDrive - DavidIT.Site/GITHUB/Python3/00 Hello Universe/data/survey.db""")
    db.row_factory = sqlite3.Row
    my_cursor = db.cursor()
    #item 916
    my_cursor.execute('''Select * FROM Visited; ''')
    for row in my_cursor:
    	print("{0} - {1} - {2}".format(row[0],row[1],row[2]))
    #item 920
    print("_"*56)
    #item 917
    my_cursor.execute('''Select * FROM Visited WHERE dated < '1930-01-01' ''')
    for row in my_cursor:
    	print("{0} - {1} - {2}".format(row[0],row[1],row[2]))
    #item 919
    print("_"*56)
    #item 918
    my_cursor.execute('''Select * FROM Visited WHERE dated >= '1930-01-01' ''')
    for row in my_cursor:
    	print("{0} - {1} - {2}".format(row[0],row[1],row[2]))
    #item 921
    print("_"*56)
    #item 922
    my_cursor.execute('''SELECT * FROM Visited WHERE dated IS NULL; ''')
    for row in my_cursor:
    	print("{0} - {1} - {2}".format(row[0],row[1],row[2]))
    #item 923
    print("_"*56)
    #item 924
    my_cursor.execute('''SELECT * FROM Visited WHERE dated IS NOT NULL; ''')
    for row in my_cursor:
    	print("{0} - {1} - {2}".format(row[0],row[1],row[2]))
    #item 926
    print("_"*56)
    #item 925
    my_cursor.execute('''SELECT * FROM Survey WHERE quant = 'sal' AND person IS NULL; ''')
    for row in my_cursor:
    	print("{0} - {1} - {2}".format(row[0],row[1],row[2]))
    #item 928
    print("_"*56)
    #item 927
    my_cursor.execute('''SELECT * FROM Visited WHERE dated IS NOT NULL ORDER BY dated ASC; ''')
    for row in my_cursor:
    	print("{0} - {1} - {2}".format(row[0],row[1],row[2]))
    #item 914
    db.close()


def mysql_swc_06_aggregation():
    #item 936
    """calculate more complex things in sql"""
    #item 934
    import sqlite3
    db = sqlite3.connect( """C:/Users/David/OneDrive - DavidIT.Site/GITHUB/Python3/00 Hello Universe/data/survey.db""")
    db.row_factory = sqlite3.Row
    my_cursor = db.cursor()
    #item 942
    print("_"*56)
    #item 937
    my_cursor.execute('''Select dated FROM Visited; ''')
    for row in my_cursor:
    	print("{0} ".format(row[0]))
    #item 941
    print("_"*56)
    #item 943
    my_cursor.execute('''Select min(dated) FROM Visited; ''')
    for row in my_cursor:
    	print("{0} ".format(row[0]))
    #item 945
    my_cursor.execute('''Select max(dated) FROM Visited; ''')
    for row in my_cursor:
    	print("{0} ".format(row[0]))
    #item 946
    my_cursor.execute('''Select avg(reading) FROM Survey; ''')
    for row in my_cursor:
    	print("{0} ".format(row[0]))
    #item 947
    my_cursor.execute('''Select avg(reading) FROM Survey WHERE quant = 'sal'; ''')
    for row in my_cursor:
    	print("{0} ".format(row[0]))
    #item 948
    my_cursor.execute('''Select count(reading) FROM Survey WHERE quant = 'sal'; ''')
    for row in my_cursor:
    	print("{0} ".format(row[0]))
    #item 949
    my_cursor.execute('''SELECT person FROM Survey WHERE quant = 'sal' AND reading <= 1.0;
    ''')
    for row in my_cursor:
    	print("{0} ".format(row[0]))
    #item 944
    print("_"*56)
    #item 950
    dbq = '''
    SELECT   person, round(avg(reading) - min(reading),2)
    FROM     Survey
    WHERE    quant = 'rad'
    GROUP BY person;
    '''
    my_cursor.execute(dbq)
    for row in my_cursor:
    	print("{0} - {1} ".format(row[0],row[1]))
    #item 951
    dbq = '''
    SELECT   person, quant, count(reading), round(avg(reading), 2)
    FROM     Survey
    GROUP BY person, quant;
    '''
    my_cursor.execute(dbq)
    for row in my_cursor:
    	print("{0} - {1} - {2} - {3}".format(row[0],row[1], row[2],row[3]))
    #item 952
    dbq = '''
    SELECT   person, quant, count(reading), round(avg(reading),2)
    FROM     Survey
    WHERE    person IS NOT NULL
    GROUP BY person, quant
    ORDER BY person, quant;
    '''
    my_cursor.execute(dbq)
    for row in my_cursor:
    	print("{0} - {1} - {2} - {3}".format(row['person'],row['quant'], row['count(reading)'],row['round(avg(reading),2)']))
    #item 953
    dbq = '''
    SELECT reading - avg(reading) FROM Survey WHERE quant = 'rad';
    '''
    my_cursor.execute(dbq)
    for row in my_cursor:
    	print("{0} ".format(row[0]))
    #item 935
    db.close()


def mysql_swc_07_join():
    #item 959
    """Aggregate data from multiple tables"""
    #item 957
    import sqlite3
    db = sqlite3.connect( """C:/Users/David/OneDrive - DavidIT.Site/GITHUB/Python3/00 Hello Universe/data/survey.db""")
    db.row_factory = sqlite3.Row
    my_cursor = db.cursor()
    #item 962
    print("_"*56)
    #item 963
    dbq = '''
    SELECT	*
    FROM	Site JOIN	Visited
    ON	Site.name = Visited.site
    
    '''
    my_cursor.execute(dbq)
    for row in my_cursor:
    	print("{0} - {1} - {2} - {3} - {4} - {5} ".format(row[0],row[1],row[2],row[3],row[4],row[5]))
    #item 964
    print("_"*56)
    #item 965
    dbq = '''
    SELECT	null,Site.lat, Site.long, Visited.dated, Survey.quant, Survey.reading
    FROM	Site
    JOIN	Visited
    JOIN	Survey
    ON	Site.name = Visited.site
    AND	Visited.id=Survey.taken
    AND Visited.dated IS NOT NULL
    
    '''
    my_cursor.execute(dbq)
    for row in my_cursor:
    	print("{0} - {1} - {2} - {3} - {4} - {5} ".format(row['lat'],row[1],row[2],row[3],row[4],row[5]))
    #item 967
    print("_"*56)
    #item 966
    dbq = '''
    SELECT	DISTINCT	Site.name, Person.id , Visited.site
    FROM	Site
    JOIN	Visited
    JOIN	Survey
    JOIN	Person
    ON Site.name = Visited.site
    
    '''
    my_cursor.execute(dbq)
    for row in my_cursor:
    	print("{0} - {1} - {2}".format(row[0],row[1],row[2]))
    #item 968
    print("_"*56)
    #item 969
    dbq = '''
    SELECT	Visited.id, Visited.site, Visited.dated, Survey.taken, Survey.quant, Survey.reading, Survey.person
    FROM	Visited
    JOIN	Survey
    
    ON Visited.id = Survey.taken
    WHERE Survey.quant = 'rad';
    '''
    my_cursor.execute(dbq)
    for row in my_cursor:
    	print("{0} - {1} - {2}".format(row['quant'],row[1],row[2]))
    #item 958
    db.close()


def mysql_swc_09_create():
    #item 981
    """create and drop tables"""
    #item 985
    import sqlite3
    db = sqlite3.connect( """C:/Users/David/OneDrive - DavidIT.Site/GITHUB/Python3/00 Hello Universe/data/test.db""")
    db.row_factory = sqlite3.Row
    my_cursor = db.cursor()
    #item 998
    dbql = [
    '''CREATE TABLE IF NOT EXISTS Person(id text, personal text, family text);''',
    '''CREATE TABLE IF NOT EXISTS Site(name text, lat real, long real);''',
    '''CREATE TABLE IF NOT EXISTS Visited(id integer, site text, dated text);''',
    '''CREATE TABLE IF NOT EXISTS Survey(taken integer, person text, quant text, reading real);'''
    ]
    for query in dbql:
        #item 988
        my_cursor.execute(query)
    #item 989
    print("Inserting values into database")
    
    dbq = [
    "INSERT INTO Site VALUES('DR-1', -49.85, -128.57);",
    "INSERT INTO Site VALUES('DR-2', -47.15, -126.72);",
    "INSERT INTO Site VALUES('DR-3', -47.15, -126.72);",
    "INSERT INTO Site VALUES('MSK-4', -48.87, -123.40);"
    ]
    for query in dbq:
        #item 992
        my_cursor.execute(query)
    #item 996
    print("updating values in database")
    
    dbq = [
    "UPDATE Site SET lat = -128.57, long = -49.86 WHERE name = 'DR-1';"
    ]
    for query in dbq:
        #item 997
        my_cursor.execute(query)
    #item 1001
    print("delete values in database")
    
    dbq = [
    "DELETE FROM Site Where name = 'DR-3';",
    ]
    for query in dbq:
        #item 1002
        my_cursor.execute(query)
    #item 1005
    print("printing values in database")
    
    dbq = "SELECT Site.lat, Site.long FROM Site;"
    results = my_cursor.execute(dbq)
    for row in results:
    	print( "{0} {1}".format(row[0],row[1]))
    #item 980
    db.close()


def mysql_transactions():
    #item 770
    print("pick up here")


def pattern1():
    #item 586
    print("Pattern1")
    from pampy import match, HEAD, TAIL, _
    
    x = [1, 2, 3]
    
    match(x, [1, TAIL],     lambda t: t)            # => [2, 3]
    
    print(match(x, [HEAD, TAIL],  lambda h, t: (h, t)))    # => (1, [2, 3])
    #item 587
    input = x
    pattern = [1,2,_]
    action = lambda x:	print("it's {}".format(x))
    match(input,pattern,action)


def pattern2():
    #item 638
    """ searching thru text for a particular pattern with regex: phone number example """
    #item 640
    text = """My number is (706)-452-3484; text anytime;
    this ad will go away when the offer has been filled;
    I have another number, in a slightly different format: (678)-369 6707\n"""
    
    print(text)
    import re
    
    #'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d'  if not raw string escape char
    phone_num_regex = re.compile(r'\+?1?\s*\(?-*\.*(\d{3})\)?\.*-*\s*(\d{3})\.*-*\s*(\d{4})$')
    matched_objects = phone_num_regex.search(text)
    #item 641
    print(matched_objects.group())


def pattern_main():
    #item 588
    """https://github.com/santinic/pampy"""
    #item 584
    pattern1()
    pattern2()
    #item 658
    print("_"*56)


def select_flow(input_state):
    #item 416
    """ select from multiple compute paths by switching with on an input """
    #item 4010001
    if input_state == 0:
        #item 411
        print("number 0")
    else:
        #item 4010002
        if input_state == "one":
            #item 412
            print("one")
        else:
            #item 4010003
            if input_state == 3:
                #item 413
                print("3")
            else:
                #item 415
                print("unknown state")


def slut_main():
    #item 975
    """http://slut.sourceforge.net/manual/index.html"""


def sort_function1(s):
    #item 510
    """returns the last value in a string"""
    #item 508
    return s[-1]


def sorting_main():
    #item 500
    """The 'main' for running sorting demo"""
    #item 497
    basics_sort()
    #item 528
    print("_"*56)


def string_basic_hello():
    #item 429
    """ This is a demonstration of printing text """
    #item 428
    print("""
    
    Hello Universe; 
    	This is for fun, understanding
    	& does not include any promises
    
    """)


def string_basics1():
    #item 421
    """ Basic manipulation of strings (with other types) """
    #item 422
    # variable s stores the string "hello universe"
    s = "hello universe"
    #item 423
    # get the length of the variable s, and print it
    
    print(len(s))
    #item 424
    # working with strings and numbers
    
    text = 'The value of pi is ' 
    pi = 3.14
    print(text)
    print(pi)
    
    #TypeError: can only concatenate str (not "float") to str
    #print(text+pi) 
    
    print(text+str(pi))
    print("_"*56)


def string_basics2():
    #item 433
    """ Basic methods that operate on objects that are strings """
    #item 434
    # this are the strings we will be working with
    S1 = "Siji is here"
    S2 = "3.14"
    #item 435
    # returns an upper or lowercase version of the string
    print(S1.lower())
    print(S1.upper())
    #item 436
    # returns an upper or lowercase version of the string with no spaces
    
    print((S1.replace('a',"      ")).upper())
    #item 446
    print("_"*56)


def string_basics3():
    #item 440
    """ demonstration of string slices """
    # slice [start:end]
    s3 = "SIJI IS HERE"
    print(s3[5:7])
    print(s3[3:])
    print(s3[:2])
    #item 447
    print("_"*56)


def string_main():
    #item 310
    """ This is the main python file for demonstrating the string methods """
    #item 316
    string_basic_hello()
    #item 309
    string_basics1()
    #item 329
    string_basics2()
    #item 379
    string_basics3()


def string_pretty_print1():
    #item 444
    """ example adding data to print strings """
    #item 445
    text =  "%d people are valid. Watch us, %s, try" % (0,"billions")
    #item 448
    print("_"*56)


def tuples_basics():
    #item 520
    """ tuples are n dimensional groups of elements, the size is immutable """
    #item 521
    print("tuples can be accessed just like a list")
    my_tuple = (1,2,'hello','David')
    print(my_tuple)
    print(my_tuple[1])
    print("Single elements inside tuples can not be updated; the entire block needs to be re-assigned")
    my_tuple = (1,2,'hello','MartinMaker')
    print(my_tuple)
    #item 530
    #Easy assigning var names with tuples
    (choice1, choice2, chosen_greeting, player_name) = (1,2,'hello','MartinMaker')
    print(chosen_greeting)


def tuples_main():
    #item 519
    tuples_basics()
    #item 529
    print("_"*56)


def while_loop():
    #item 280
    """This is the demonstration of a while loop.
    Comment this out; it's infinite
    """
    #item 274
    ans = 1
    while True:
        #item 275
        if ans:
            pass
        else:
            break
        #item 277
        print("""This code path is being executed """)
        ans = "while loop demo"
        print(ans)
    #item 276
    print("This code path is being executed, it will not loop again")


def while_multichoice():
    #item 608
    """This is the demonstration of a while loop."""
    #item 602
    ans = 1
    while True:
        #item 603
        if ans:
            pass
        else:
            break
        #item 605
        print("""This code path is being executed """)
        ans = demo_multichoice("while loop demo")
        print(ans)
    #item 604
    print("This code path is being executed, it will not loop again")

class customer:


    def __init__(self, name, balance=0):
        #item 653
        self.name = name
        self.balance = balance


    def __repr__(self):
        #item 664
        return("%s has balance: %d" % (self.name, self.balance))


    def send_funds(self, send_to, amount_to_send):
        #item 670
        if amount_to_send > self.balance:
            #item 674
            print("too poor")
            #custom error not enough money
        else:
            #item 673
            self.balance = self.balance - amount_to_send
            send_to.balance = send_to.balance + amount_to_send
            print("%s has succesfully sent %s: %d"%(self.name, send_to.name, amount_to_send))


    def set_account_balance(self, account_balance):
        #item 213
        self.account_worth = account_balance


    def set_name(self, name):
        #item 207
        self.name = name


    def withdrawal(self, amount_withdrawal):
        #item 684
        if amount_withdrawal > self.balance:
            #item 688
            print("%s's does not have enough balance. No withdrawal"% self.name)
            #custom error not enough money
        else:
            #item 687
            self.balance = self.balance - amount_withdrawal
            print("%s succesful withdrawl. Remaining balance: %d"% (self.name, self.balance))

main()
