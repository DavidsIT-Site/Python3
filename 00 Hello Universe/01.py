import easygui as eg

# Autogenerated with DRAKON Editor 1.31

def class_ex_main():
    #item 302
    mw1 = MoneyWaster()
    mw1.set_account(10)
    mw1.spend(100)


def control_flow_main():
    #item 346
    """ demonstration of control flows in drakon """
    #item 345
    if_statement()
    #item 347
    select_flow(1)
    select_flow("one")
    select_flow(3)
    select_flow("3")
    #item 450
    print("_"*56)


def demo_multichoice(title):
    #item 199
    """ Popup a demo multichoice window """
    #item 196
    question = "This is your question"
    #item 197
    listOfOptions = ["option 1", "option 2", "option 3"]
    #item 195
    choice = eg.multchoicebox(question, title, listOfOptions)
    #item 198
    return(choice)


def do_while_loop():
    #item 270
    """This is the demonstration of a do-while loop."""
    while True:
        #item 264
        
        ans = demo_multichoice("do while  loop demo")
        print(ans)
        #item 265
        if ans:
            pass
        else:
            break
        #item 267
        print("""This code path is being executed; it will loop again """)
    #item 266
    print("This code path is being executed, it will not loop again")


def foreach_loop(items_list):
    #item 284
    """This is the demonstration of a foreach loop;
     it will also serve to for expansion to print a list"""
    for my_item in items_list:
        #item 289
        print(my_item)


def if_statement():
    #item 393
    speed = 100
    #item 390
    if speed > 80:
        #item 395
        print("Have a nice day")
    else:
        #item 394
        print("Going to jail")


def list_methods():
    #item 465
    """ Working with common list methods """
    #item 457
    people_list = ['larry', 'curly', 'moe']
    
    #building on earlier loops work
    #print current list of people
    foreach_loop(people_list) 
    
    print("Adding a single element to the end of the list")
    people_list.append('david')
    #unlike all of the other people in this code; you are important
    #Make your name caps
    people_list.append('David')
    #item 466
    #I really meant to add Myself at the front of the list
    print("Inserting into a list at a particular location")
    people_list.insert(0,'David')
    print(people_list)
    #item 467
    #Now, I'm in the list multiple times
    print("removing elements from list")
    people_list.remove('david')
    print(people_list)
    #item 468
    #now, I'm only in the list twice
    
    people_list.pop(4)
    print(people_list)
    #item 481
    print("end of list methods")


def list_slices():
    #item 482
    print("herro")


def lists_main():
    #item 463
    list_methods()
    #item 472
    list_slices()


def loops_demo():
    #item 296
    """ Displays foreach, while, and do-while loops """
    #item 293
    print("FOREACH DEMO")
    fruits = ['apples', 'cherries', 'pears']
    foreach_loop(fruits)
    #item 451
    print("FOREACH DEMO 2")
    fruits = ['larry', 'curly', 'moe']
    foreach_loop(fruits)
    #item 294
    print("WHILE DEMO")
    while_loop()
    #item 295
    print("DO WHILE DEMO")
    do_while_loop()
    #item 470
    print("_"*56)


def main():
    #item 103
    """ This is the main, edits here change what runs """
    #item 141
    string_main()
    #item 417
    control_flow_main()
    #item 469
    #loops_demo()
    #item 464
    list_methods()


def select_flow(input_state):
    #item 416
    """ select from multiple compute paths by switching with on an input """
    #item 4010001
    if input_state == 0:
        #item 411
        print("number 0")
    else:
        #item 4010002
        if input_state == "one":
            #item 412
            print("one")
        else:
            #item 4010003
            if input_state == 3:
                #item 413
                print("3")
            else:
                #item 415
                print("unknown state")


def string_basic_hello():
    #item 429
    """ This is a demonstration of printing text """
    #item 428
    print("""
    
    Hello Universe; 
    	This is for fun, understanding
    	& does not include any promises
    
    """)


def string_basics1():
    #item 421
    """ Basic manipulation of strings (with other types) """
    #item 422
    # variable s stores the string "hello universe"
    s = "hello universe"
    #item 423
    # get the length of the variable s, and print it
    
    print(len(s))
    #item 424
    # working with strings and numbers
    
    text = 'The value of pi is ' 
    pi = 3.14
    print(text)
    print(pi)
    
    #TypeError: can only concatenate str (not "float") to str
    #print(text+pi) 
    
    print(text+str(pi))
    print("_"*56)


def string_basics2():
    #item 433
    """ Basic methods that operate on objects that are strings """
    #item 434
    # this are the strings we will be working with
    S1 = "Siji is here"
    S2 = "3.14"
    #item 435
    # returns an upper or lowercase version of the string
    print(S1.lower())
    print(S1.upper())
    #item 436
    # returns an upper or lowercase version of the string with no spaces
    
    print((S1.replace('a',"      ")).upper())
    #item 446
    print("_"*56)


def string_basics3():
    #item 440
    """ demonstration of string slices """
    # slice [start:end]
    s3 = "SIJI IS HERE"
    print(s3[5:7])
    print(s3[3:])
    print(s3[:2])
    #item 447
    print("_"*56)


def string_main():
    #item 310
    """ This is the main python file for demonstrating the string methods """
    #item 316
    string_basic_hello()
    #item 309
    string_basics1()
    #item 329
    string_basics2()
    #item 379
    string_basics3()


def string_pretty_print1():
    #item 444
    """ example adding data to print strings """
    #item 445
    text =  "%d people are valid. Watch us, %s, try" % (0,"billions")
    #item 448
    print("_"*56)


def while_loop():
    #item 280
    """This is the demonstration of a while loop."""
    #item 274
    ans = 1
    while True:
        #item 275
        if ans:
            pass
        else:
            break
        #item 277
        print("""This code path is being executed """)
        ans = demo_multichoice("while loop demo")
        print(ans)
    #item 276
    print("This code path is being executed, it will not loop again")

class MoneyWaster:


    def set_account(self, value):
        #item 213
        self.account_worth = value


    def set_name(self, name):
        #item 207
        self.name = name


    def spend(self, value):
        #item 220
        print("pre spend")
        print(value)
        print(self.account_worth)
        #item 219
        self.account_worth = self.account_worth - value
        #item 221
        print("post spend")
        print(value)
        print(self.account_worth)

main()
