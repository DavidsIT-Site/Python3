import math

# Autogenerated with DRAKON Editor 1.31

def _main_boolean():
    #item 117
    print(True)
    print(False)
    print(type(True))


def _main_datatypes():
    #item 110
    _main_none()
    #item 57
    _main_number()
    #item 69
    _main_strings()
    #item 111
    _main_boolean()


def _main_import_syntax():
    #item 4
    imports()
    #item 5
    syntax_roles()


def _main_none():
    #item 103
    _none()


def _main_number():
    #item 30
    integers()
    #item 31
    floats()
    #item 32
    complexs()
    #item 33
    operators()
    #item 58
    casting()


def _main_strings():
    #item 90
    length()
    #item 94
    slicing()
    #item 95
    operator()
    #item 97
    string_casting()


def _none():
    #item 109
    print(None is None)
    print(None is 2)
    print(None == 1)
    print(type(None))


def casting():
    #item 62
    print('casting is the process where you attempt to fit one data type into another')
    print("this process doesn't always work and can return an error")
    #item 63
    print(float.__doc__)
    
    a = '3.14'
    #print(a ** a)  # uncomment this
    print(float(a) ** float(a))


def complexs():
    #item 48
    print('python can even work with so called complex numbers')
    #item 47
    num = 10 + 20j
    num2 =  complex(10, 20)
    num_type = type(num)
    
    print('num: {} has the type {}'.format(num, num_type))
    
    print('num2: {} has the type {}'.format(num2, type(num2)))


def floats():
    #item 43
    print('There are different types of numbers')
    #item 42
    num = 10.10
    num_type = type(num)
    
    print('the number: {} has the type {}'.format(num, num_type))


def imports():
    #item 13
    print("The Import statement above makes some other math code available within the project")
    print(math.pi)


def integers():
    #item 38
    print('python makes it easy to work with numbers')
    #item 37
    num = 10
    num_type = type(num)
    
    print('the number: {} has the type {}'.format(num, num_type))


def length():
    #item 92
    s = 'study and practice'
    print('{}: {}'.format(len(s), s))


def main():
    #item 24
    
    _main_import_syntax()
    _main_datatypes()


def operator():
    #item 93
    s = 'study and practice'
    print( s * 2)


def operators():
    #item 52
    print('python comes with build in operators, they are:')
    print("""+ - * / ** // % """)


def slicing():
    #item 91
    s = 'study and practice'
    print('{}: {}'.format(s[:5], s[-8:]))


def string_casting():
    #item 96
    a = 3.1459
    b = [1, 2, 3, (4, 5), 6]
    print(str(a))
    print(str(b))


def syntax_roles():
    #item 9
    N = "David"
    n = 30
    
    print('N is: '.format(N))
    print('n is: '.format(n))
    print("Python is case sensitive")

main()
